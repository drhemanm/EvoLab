// Evo Lab Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users & Authentication
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  clerkId       String?  @unique @map("clerk_id")
  plan          Plan     @default(FREE)
  computeCredits Int     @default(100) @map("compute_credits")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  datasets      Dataset[]
  models        Model[]
  trainingJobs  TrainingJob[]
  purchases     Transaction[] @relation("Buyer")
  sales         Transaction[] @relation("Seller")
  apiKeys       ApiKey[]
  usageLogs     UsageLog[]

  @@map("users")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

// Datasets
model Dataset {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  fileUrl     String   @map("file_url")
  fileSize    BigInt?  @map("file_size")
  dataType    String   @map("data_type") // text, csv, json
  numSamples  Int?     @map("num_samples")
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  models      Model[]

  @@index([userId])
  @@map("datasets")
}

// Models (Evolution Instances)
model Model {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  datasetId       String?  @map("dataset_id")
  name            String
  description     String?
  
  // Current State
  status          ModelStatus @default(PENDING)
  currentGeneration Int      @default(0) @map("current_generation")
  
  // Genome Configuration (stored as JSON)
  genome          Json
  initialGenome   Json     @map("initial_genome")
  
  // Performance Metrics
  bestFitness     Float?   @map("best_fitness")
  currentFitness  Float?   @map("current_fitness")
  trainAccuracy   Float?   @map("train_accuracy")
  valAccuracy     Float?   @map("val_accuracy")
  
  // Model Files
  checkpointUrl   String?  @map("checkpoint_url")
  modelSizeMb     Float?   @map("model_size_mb")
  
  // Visibility & Marketplace
  isPublic        Boolean  @default(false) @map("is_public")
  isMarketplace   Boolean  @default(false) @map("is_marketplace")
  price           Decimal  @default(0) @db.Decimal(10, 2)
  
  // Metadata
  totalComputeTime Int?    @map("total_compute_time")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  dataset         Dataset?     @relation(fields: [datasetId], references: [id])
  evolutions      Evolution[]
  trainingJobs    TrainingJob[]
  transactions    Transaction[]

  @@index([userId])
  @@index([status])
  @@map("models")
}

enum ModelStatus {
  PENDING
  TRAINING
  EVOLVED
  FAILED
  DEPLOYED
}

// Evolution History
model Evolution {
  id              String   @id @default(cuid())
  modelId         String   @map("model_id")
  generation      Int
  
  // Genome at this generation
  genome          Json
  
  // Performance
  fitness         Float?
  trainAccuracy   Float?   @map("train_accuracy")
  valAccuracy     Float?   @map("val_accuracy")
  loss            Float?
  
  // Mutation Info
  mutationType    String?  @map("mutation_type")
  parentGenome    Json?    @map("parent_genome")
  
  // Timing
  trainingTime    Int?     @map("training_time")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  model           Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([modelId, generation])
  @@index([modelId])
  @@map("evolutions")
}

// Training Jobs (Queue Management)
model TrainingJob {
  id              String   @id @default(cuid())
  modelId         String   @map("model_id")
  userId          String   @map("user_id")
  
  // Job Details
  status          JobStatus @default(QUEUED)
  jobType         String   @map("job_type") // initial_training, evolution, inference
  priority        Int      @default(5)
  
  // Compute
  gpuType         String?  @map("gpu_type")
  estimatedTime   Int?     @map("estimated_time")
  actualTime      Int?     @map("actual_time")
  computeCost     Decimal? @map("compute_cost") @db.Decimal(10, 4)
  
  // Results
  resultData      Json?    @map("result_data")
  errorMessage    String?  @map("error_message")
  
  // Timing
  queuedAt        DateTime @default(now()) @map("queued_at")
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")

  // Relations
  model           Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@map("training_jobs")
}

enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

// Marketplace Transactions
model Transaction {
  id              String   @id @default(cuid())
  buyerId         String   @map("buyer_id")
  sellerId        String   @map("seller_id")
  modelId         String   @map("model_id")
  
  amount          Decimal  @db.Decimal(10, 2)
  stripePaymentId String?  @map("stripe_payment_id")
  status          TransactionStatus @default(PENDING)
  
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  buyer           User     @relation("Buyer", fields: [buyerId], references: [id])
  seller          User     @relation("Seller", fields: [sellerId], references: [id])
  model           Model    @relation(fields: [modelId], references: [id])

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// API Keys
model ApiKey {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  keyHash     String   @unique @map("key_hash")
  name        String?
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Usage Analytics
model UsageLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}
